// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2019 20:36:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONTROL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROL_vlg_sample_tst(
	big_conteo,
	clk,
	Columnas,
	Confirmar,
	Conteo,
	conteo_bits,
	reset,
	sampler_tx
);
input  big_conteo;
input  clk;
input [3:0] Columnas;
input  Confirmar;
input  Conteo;
input  conteo_bits;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(big_conteo or clk or Columnas or Confirmar or Conteo or conteo_bits or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONTROL_vlg_check_tst (
	EnableDATO,
	enableDesplazar,
	enableGlobal,
	enableGuardar,
	estados,
	reset_Cont,
	reset_cont_bits,
	resetBigContador,
	select_1,
	select_2,
	select_3,
	sampler_rx
);
input [5:0] EnableDATO;
input  enableDesplazar;
input  enableGlobal;
input  enableGuardar;
input [39:0] estados;
input  reset_Cont;
input  reset_cont_bits;
input  resetBigContador;
input [2:0] select_1;
input [2:0] select_2;
input [2:0] select_3;
input sampler_rx;

reg [5:0] EnableDATO_expected;
reg  enableDesplazar_expected;
reg  enableGlobal_expected;
reg  enableGuardar_expected;
reg [39:0] estados_expected;
reg  reset_Cont_expected;
reg  reset_cont_bits_expected;
reg  resetBigContador_expected;
reg [2:0] select_1_expected;
reg [2:0] select_2_expected;
reg [2:0] select_3_expected;

reg [5:0] EnableDATO_prev;
reg  enableDesplazar_prev;
reg  enableGlobal_prev;
reg  enableGuardar_prev;
reg [39:0] estados_prev;
reg  reset_Cont_prev;
reg  reset_cont_bits_prev;
reg  resetBigContador_prev;
reg [2:0] select_1_prev;
reg [2:0] select_2_prev;
reg [2:0] select_3_prev;

reg [5:0] EnableDATO_expected_prev;
reg  enableDesplazar_expected_prev;
reg  enableGlobal_expected_prev;
reg  enableGuardar_expected_prev;
reg [39:0] estados_expected_prev;
reg  reset_Cont_expected_prev;
reg  reset_cont_bits_expected_prev;
reg  resetBigContador_expected_prev;
reg [2:0] select_1_expected_prev;
reg [2:0] select_2_expected_prev;
reg [2:0] select_3_expected_prev;

reg [5:0] last_EnableDATO_exp;
reg  last_enableDesplazar_exp;
reg  last_enableGlobal_exp;
reg  last_enableGuardar_exp;
reg [39:0] last_estados_exp;
reg  last_reset_Cont_exp;
reg  last_reset_cont_bits_exp;
reg  last_resetBigContador_exp;
reg [2:0] last_select_1_exp;
reg [2:0] last_select_2_exp;
reg [2:0] last_select_3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	EnableDATO_prev = EnableDATO;
	enableDesplazar_prev = enableDesplazar;
	enableGlobal_prev = enableGlobal;
	enableGuardar_prev = enableGuardar;
	estados_prev = estados;
	reset_Cont_prev = reset_Cont;
	reset_cont_bits_prev = reset_cont_bits;
	resetBigContador_prev = resetBigContador;
	select_1_prev = select_1;
	select_2_prev = select_2;
	select_3_prev = select_3;
end

// update expected /o prevs

always @(trigger)
begin
	EnableDATO_expected_prev = EnableDATO_expected;
	enableDesplazar_expected_prev = enableDesplazar_expected;
	enableGlobal_expected_prev = enableGlobal_expected;
	enableGuardar_expected_prev = enableGuardar_expected;
	estados_expected_prev = estados_expected;
	reset_Cont_expected_prev = reset_Cont_expected;
	reset_cont_bits_expected_prev = reset_cont_bits_expected;
	resetBigContador_expected_prev = resetBigContador_expected;
	select_1_expected_prev = select_1_expected;
	select_2_expected_prev = select_2_expected;
	select_3_expected_prev = select_3_expected;
end



// expected enableDesplazar
initial
begin
	enableDesplazar_expected = 1'bX;
end 

// expected enableGlobal
initial
begin
	enableGlobal_expected = 1'bX;
end 

// expected enableGuardar
initial
begin
	enableGuardar_expected = 1'bX;
end 

// expected reset_Cont
initial
begin
	reset_Cont_expected = 1'bX;
end 

// expected reset_cont_bits
initial
begin
	reset_cont_bits_expected = 1'bX;
end 

// expected resetBigContador
initial
begin
	resetBigContador_expected = 1'bX;
end 
// expected select_1[ 2 ]
initial
begin
	select_1_expected[2] = 1'bX;
end 
// expected select_1[ 1 ]
initial
begin
	select_1_expected[1] = 1'bX;
end 
// expected select_1[ 0 ]
initial
begin
	select_1_expected[0] = 1'bX;
end 
// expected select_2[ 2 ]
initial
begin
	select_2_expected[2] = 1'bX;
end 
// expected select_2[ 1 ]
initial
begin
	select_2_expected[1] = 1'bX;
end 
// expected select_2[ 0 ]
initial
begin
	select_2_expected[0] = 1'bX;
end 
// expected select_3[ 2 ]
initial
begin
	select_3_expected[2] = 1'bX;
end 
// expected select_3[ 1 ]
initial
begin
	select_3_expected[1] = 1'bX;
end 
// expected select_3[ 0 ]
initial
begin
	select_3_expected[0] = 1'bX;
end 
// expected EnableDATO[ 5 ]
initial
begin
	EnableDATO_expected[5] = 1'bX;
end 
// expected EnableDATO[ 4 ]
initial
begin
	EnableDATO_expected[4] = 1'bX;
end 
// expected EnableDATO[ 3 ]
initial
begin
	EnableDATO_expected[3] = 1'bX;
end 
// expected EnableDATO[ 2 ]
initial
begin
	EnableDATO_expected[2] = 1'bX;
end 
// expected EnableDATO[ 1 ]
initial
begin
	EnableDATO_expected[1] = 1'bX;
end 
// expected EnableDATO[ 0 ]
initial
begin
	EnableDATO_expected[0] = 1'bX;
end 
// expected estados[ 39 ]
initial
begin
	estados_expected[39] = 1'bX;
end 
// expected estados[ 38 ]
initial
begin
	estados_expected[38] = 1'bX;
end 
// expected estados[ 37 ]
initial
begin
	estados_expected[37] = 1'bX;
end 
// expected estados[ 36 ]
initial
begin
	estados_expected[36] = 1'bX;
end 
// expected estados[ 35 ]
initial
begin
	estados_expected[35] = 1'bX;
end 
// expected estados[ 34 ]
initial
begin
	estados_expected[34] = 1'bX;
end 
// expected estados[ 33 ]
initial
begin
	estados_expected[33] = 1'bX;
end 
// expected estados[ 32 ]
initial
begin
	estados_expected[32] = 1'bX;
end 
// expected estados[ 31 ]
initial
begin
	estados_expected[31] = 1'bX;
end 
// expected estados[ 30 ]
initial
begin
	estados_expected[30] = 1'bX;
end 
// expected estados[ 29 ]
initial
begin
	estados_expected[29] = 1'bX;
end 
// expected estados[ 28 ]
initial
begin
	estados_expected[28] = 1'bX;
end 
// expected estados[ 27 ]
initial
begin
	estados_expected[27] = 1'bX;
end 
// expected estados[ 26 ]
initial
begin
	estados_expected[26] = 1'bX;
end 
// expected estados[ 25 ]
initial
begin
	estados_expected[25] = 1'bX;
end 
// expected estados[ 24 ]
initial
begin
	estados_expected[24] = 1'bX;
end 
// expected estados[ 23 ]
initial
begin
	estados_expected[23] = 1'bX;
end 
// expected estados[ 22 ]
initial
begin
	estados_expected[22] = 1'bX;
end 
// expected estados[ 21 ]
initial
begin
	estados_expected[21] = 1'bX;
end 
// expected estados[ 20 ]
initial
begin
	estados_expected[20] = 1'bX;
end 
// expected estados[ 19 ]
initial
begin
	estados_expected[19] = 1'bX;
end 
// expected estados[ 18 ]
initial
begin
	estados_expected[18] = 1'bX;
end 
// expected estados[ 17 ]
initial
begin
	estados_expected[17] = 1'bX;
end 
// expected estados[ 16 ]
initial
begin
	estados_expected[16] = 1'bX;
end 
// expected estados[ 15 ]
initial
begin
	estados_expected[15] = 1'bX;
end 
// expected estados[ 14 ]
initial
begin
	estados_expected[14] = 1'bX;
end 
// expected estados[ 13 ]
initial
begin
	estados_expected[13] = 1'bX;
end 
// expected estados[ 12 ]
initial
begin
	estados_expected[12] = 1'bX;
end 
// expected estados[ 11 ]
initial
begin
	estados_expected[11] = 1'bX;
end 
// expected estados[ 10 ]
initial
begin
	estados_expected[10] = 1'bX;
end 
// expected estados[ 9 ]
initial
begin
	estados_expected[9] = 1'bX;
end 
// expected estados[ 8 ]
initial
begin
	estados_expected[8] = 1'bX;
end 
// expected estados[ 7 ]
initial
begin
	estados_expected[7] = 1'bX;
end 
// expected estados[ 6 ]
initial
begin
	estados_expected[6] = 1'bX;
end 
// expected estados[ 5 ]
initial
begin
	estados_expected[5] = 1'bX;
end 
// expected estados[ 4 ]
initial
begin
	estados_expected[4] = 1'bX;
end 
// expected estados[ 3 ]
initial
begin
	estados_expected[3] = 1'bX;
end 
// expected estados[ 2 ]
initial
begin
	estados_expected[2] = 1'bX;
end 
// expected estados[ 1 ]
initial
begin
	estados_expected[1] = 1'bX;
end 
// expected estados[ 0 ]
initial
begin
	estados_expected[0] = 1'bX;
end 
// generate trigger
always @(EnableDATO_expected or EnableDATO or enableDesplazar_expected or enableDesplazar or enableGlobal_expected or enableGlobal or enableGuardar_expected or enableGuardar or estados_expected or estados or reset_Cont_expected or reset_Cont or reset_cont_bits_expected or reset_cont_bits or resetBigContador_expected or resetBigContador or select_1_expected or select_1 or select_2_expected or select_2 or select_3_expected or select_3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected EnableDATO = %b | expected enableDesplazar = %b | expected enableGlobal = %b | expected enableGuardar = %b | expected estados = %b | expected reset_Cont = %b | expected reset_cont_bits = %b | expected resetBigContador = %b | expected select_1 = %b | expected select_2 = %b | expected select_3 = %b | ",EnableDATO_expected_prev,enableDesplazar_expected_prev,enableGlobal_expected_prev,enableGuardar_expected_prev,estados_expected_prev,reset_Cont_expected_prev,reset_cont_bits_expected_prev,resetBigContador_expected_prev,select_1_expected_prev,select_2_expected_prev,select_3_expected_prev);
	$display("| real EnableDATO = %b | real enableDesplazar = %b | real enableGlobal = %b | real enableGuardar = %b | real estados = %b | real reset_Cont = %b | real reset_cont_bits = %b | real resetBigContador = %b | real select_1 = %b | real select_2 = %b | real select_3 = %b | ",EnableDATO_prev,enableDesplazar_prev,enableGlobal_prev,enableGuardar_prev,estados_prev,reset_Cont_prev,reset_cont_bits_prev,resetBigContador_prev,select_1_prev,select_2_prev,select_3_prev);
`endif
	if (
		( EnableDATO_expected_prev[0] !== 1'bx ) && ( EnableDATO_prev[0] !== EnableDATO_expected_prev[0] )
		&& ((EnableDATO_expected_prev[0] !== last_EnableDATO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[0] = EnableDATO_expected_prev[0];
	end
	if (
		( EnableDATO_expected_prev[1] !== 1'bx ) && ( EnableDATO_prev[1] !== EnableDATO_expected_prev[1] )
		&& ((EnableDATO_expected_prev[1] !== last_EnableDATO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[1] = EnableDATO_expected_prev[1];
	end
	if (
		( EnableDATO_expected_prev[2] !== 1'bx ) && ( EnableDATO_prev[2] !== EnableDATO_expected_prev[2] )
		&& ((EnableDATO_expected_prev[2] !== last_EnableDATO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[2] = EnableDATO_expected_prev[2];
	end
	if (
		( EnableDATO_expected_prev[3] !== 1'bx ) && ( EnableDATO_prev[3] !== EnableDATO_expected_prev[3] )
		&& ((EnableDATO_expected_prev[3] !== last_EnableDATO_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[3] = EnableDATO_expected_prev[3];
	end
	if (
		( EnableDATO_expected_prev[4] !== 1'bx ) && ( EnableDATO_prev[4] !== EnableDATO_expected_prev[4] )
		&& ((EnableDATO_expected_prev[4] !== last_EnableDATO_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[4] = EnableDATO_expected_prev[4];
	end
	if (
		( EnableDATO_expected_prev[5] !== 1'bx ) && ( EnableDATO_prev[5] !== EnableDATO_expected_prev[5] )
		&& ((EnableDATO_expected_prev[5] !== last_EnableDATO_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnableDATO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnableDATO_expected_prev);
		$display ("     Real value = %b", EnableDATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EnableDATO_exp[5] = EnableDATO_expected_prev[5];
	end
	if (
		( enableDesplazar_expected_prev !== 1'bx ) && ( enableDesplazar_prev !== enableDesplazar_expected_prev )
		&& ((enableDesplazar_expected_prev !== last_enableDesplazar_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enableDesplazar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enableDesplazar_expected_prev);
		$display ("     Real value = %b", enableDesplazar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enableDesplazar_exp = enableDesplazar_expected_prev;
	end
	if (
		( enableGlobal_expected_prev !== 1'bx ) && ( enableGlobal_prev !== enableGlobal_expected_prev )
		&& ((enableGlobal_expected_prev !== last_enableGlobal_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enableGlobal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enableGlobal_expected_prev);
		$display ("     Real value = %b", enableGlobal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_enableGlobal_exp = enableGlobal_expected_prev;
	end
	if (
		( enableGuardar_expected_prev !== 1'bx ) && ( enableGuardar_prev !== enableGuardar_expected_prev )
		&& ((enableGuardar_expected_prev !== last_enableGuardar_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enableGuardar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enableGuardar_expected_prev);
		$display ("     Real value = %b", enableGuardar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_enableGuardar_exp = enableGuardar_expected_prev;
	end
	if (
		( estados_expected_prev[0] !== 1'bx ) && ( estados_prev[0] !== estados_expected_prev[0] )
		&& ((estados_expected_prev[0] !== last_estados_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[0] = estados_expected_prev[0];
	end
	if (
		( estados_expected_prev[1] !== 1'bx ) && ( estados_prev[1] !== estados_expected_prev[1] )
		&& ((estados_expected_prev[1] !== last_estados_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[1] = estados_expected_prev[1];
	end
	if (
		( estados_expected_prev[2] !== 1'bx ) && ( estados_prev[2] !== estados_expected_prev[2] )
		&& ((estados_expected_prev[2] !== last_estados_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[2] = estados_expected_prev[2];
	end
	if (
		( estados_expected_prev[3] !== 1'bx ) && ( estados_prev[3] !== estados_expected_prev[3] )
		&& ((estados_expected_prev[3] !== last_estados_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[3] = estados_expected_prev[3];
	end
	if (
		( estados_expected_prev[4] !== 1'bx ) && ( estados_prev[4] !== estados_expected_prev[4] )
		&& ((estados_expected_prev[4] !== last_estados_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[4] = estados_expected_prev[4];
	end
	if (
		( estados_expected_prev[5] !== 1'bx ) && ( estados_prev[5] !== estados_expected_prev[5] )
		&& ((estados_expected_prev[5] !== last_estados_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[5] = estados_expected_prev[5];
	end
	if (
		( estados_expected_prev[6] !== 1'bx ) && ( estados_prev[6] !== estados_expected_prev[6] )
		&& ((estados_expected_prev[6] !== last_estados_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[6] = estados_expected_prev[6];
	end
	if (
		( estados_expected_prev[7] !== 1'bx ) && ( estados_prev[7] !== estados_expected_prev[7] )
		&& ((estados_expected_prev[7] !== last_estados_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[7] = estados_expected_prev[7];
	end
	if (
		( estados_expected_prev[8] !== 1'bx ) && ( estados_prev[8] !== estados_expected_prev[8] )
		&& ((estados_expected_prev[8] !== last_estados_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[8] = estados_expected_prev[8];
	end
	if (
		( estados_expected_prev[9] !== 1'bx ) && ( estados_prev[9] !== estados_expected_prev[9] )
		&& ((estados_expected_prev[9] !== last_estados_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[9] = estados_expected_prev[9];
	end
	if (
		( estados_expected_prev[10] !== 1'bx ) && ( estados_prev[10] !== estados_expected_prev[10] )
		&& ((estados_expected_prev[10] !== last_estados_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[10] = estados_expected_prev[10];
	end
	if (
		( estados_expected_prev[11] !== 1'bx ) && ( estados_prev[11] !== estados_expected_prev[11] )
		&& ((estados_expected_prev[11] !== last_estados_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[11] = estados_expected_prev[11];
	end
	if (
		( estados_expected_prev[12] !== 1'bx ) && ( estados_prev[12] !== estados_expected_prev[12] )
		&& ((estados_expected_prev[12] !== last_estados_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[12] = estados_expected_prev[12];
	end
	if (
		( estados_expected_prev[13] !== 1'bx ) && ( estados_prev[13] !== estados_expected_prev[13] )
		&& ((estados_expected_prev[13] !== last_estados_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[13] = estados_expected_prev[13];
	end
	if (
		( estados_expected_prev[14] !== 1'bx ) && ( estados_prev[14] !== estados_expected_prev[14] )
		&& ((estados_expected_prev[14] !== last_estados_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[14] = estados_expected_prev[14];
	end
	if (
		( estados_expected_prev[15] !== 1'bx ) && ( estados_prev[15] !== estados_expected_prev[15] )
		&& ((estados_expected_prev[15] !== last_estados_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[15] = estados_expected_prev[15];
	end
	if (
		( estados_expected_prev[16] !== 1'bx ) && ( estados_prev[16] !== estados_expected_prev[16] )
		&& ((estados_expected_prev[16] !== last_estados_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[16] = estados_expected_prev[16];
	end
	if (
		( estados_expected_prev[17] !== 1'bx ) && ( estados_prev[17] !== estados_expected_prev[17] )
		&& ((estados_expected_prev[17] !== last_estados_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[17] = estados_expected_prev[17];
	end
	if (
		( estados_expected_prev[18] !== 1'bx ) && ( estados_prev[18] !== estados_expected_prev[18] )
		&& ((estados_expected_prev[18] !== last_estados_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[18] = estados_expected_prev[18];
	end
	if (
		( estados_expected_prev[19] !== 1'bx ) && ( estados_prev[19] !== estados_expected_prev[19] )
		&& ((estados_expected_prev[19] !== last_estados_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[19] = estados_expected_prev[19];
	end
	if (
		( estados_expected_prev[20] !== 1'bx ) && ( estados_prev[20] !== estados_expected_prev[20] )
		&& ((estados_expected_prev[20] !== last_estados_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[20] = estados_expected_prev[20];
	end
	if (
		( estados_expected_prev[21] !== 1'bx ) && ( estados_prev[21] !== estados_expected_prev[21] )
		&& ((estados_expected_prev[21] !== last_estados_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[21] = estados_expected_prev[21];
	end
	if (
		( estados_expected_prev[22] !== 1'bx ) && ( estados_prev[22] !== estados_expected_prev[22] )
		&& ((estados_expected_prev[22] !== last_estados_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[22] = estados_expected_prev[22];
	end
	if (
		( estados_expected_prev[23] !== 1'bx ) && ( estados_prev[23] !== estados_expected_prev[23] )
		&& ((estados_expected_prev[23] !== last_estados_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[23] = estados_expected_prev[23];
	end
	if (
		( estados_expected_prev[24] !== 1'bx ) && ( estados_prev[24] !== estados_expected_prev[24] )
		&& ((estados_expected_prev[24] !== last_estados_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[24] = estados_expected_prev[24];
	end
	if (
		( estados_expected_prev[25] !== 1'bx ) && ( estados_prev[25] !== estados_expected_prev[25] )
		&& ((estados_expected_prev[25] !== last_estados_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[25] = estados_expected_prev[25];
	end
	if (
		( estados_expected_prev[26] !== 1'bx ) && ( estados_prev[26] !== estados_expected_prev[26] )
		&& ((estados_expected_prev[26] !== last_estados_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[26] = estados_expected_prev[26];
	end
	if (
		( estados_expected_prev[27] !== 1'bx ) && ( estados_prev[27] !== estados_expected_prev[27] )
		&& ((estados_expected_prev[27] !== last_estados_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[27] = estados_expected_prev[27];
	end
	if (
		( estados_expected_prev[28] !== 1'bx ) && ( estados_prev[28] !== estados_expected_prev[28] )
		&& ((estados_expected_prev[28] !== last_estados_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[28] = estados_expected_prev[28];
	end
	if (
		( estados_expected_prev[29] !== 1'bx ) && ( estados_prev[29] !== estados_expected_prev[29] )
		&& ((estados_expected_prev[29] !== last_estados_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[29] = estados_expected_prev[29];
	end
	if (
		( estados_expected_prev[30] !== 1'bx ) && ( estados_prev[30] !== estados_expected_prev[30] )
		&& ((estados_expected_prev[30] !== last_estados_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[30] = estados_expected_prev[30];
	end
	if (
		( estados_expected_prev[31] !== 1'bx ) && ( estados_prev[31] !== estados_expected_prev[31] )
		&& ((estados_expected_prev[31] !== last_estados_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[31] = estados_expected_prev[31];
	end
	if (
		( estados_expected_prev[32] !== 1'bx ) && ( estados_prev[32] !== estados_expected_prev[32] )
		&& ((estados_expected_prev[32] !== last_estados_exp[32]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[32] = estados_expected_prev[32];
	end
	if (
		( estados_expected_prev[33] !== 1'bx ) && ( estados_prev[33] !== estados_expected_prev[33] )
		&& ((estados_expected_prev[33] !== last_estados_exp[33]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[33] = estados_expected_prev[33];
	end
	if (
		( estados_expected_prev[34] !== 1'bx ) && ( estados_prev[34] !== estados_expected_prev[34] )
		&& ((estados_expected_prev[34] !== last_estados_exp[34]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[34] = estados_expected_prev[34];
	end
	if (
		( estados_expected_prev[35] !== 1'bx ) && ( estados_prev[35] !== estados_expected_prev[35] )
		&& ((estados_expected_prev[35] !== last_estados_exp[35]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[35] = estados_expected_prev[35];
	end
	if (
		( estados_expected_prev[36] !== 1'bx ) && ( estados_prev[36] !== estados_expected_prev[36] )
		&& ((estados_expected_prev[36] !== last_estados_exp[36]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[36] = estados_expected_prev[36];
	end
	if (
		( estados_expected_prev[37] !== 1'bx ) && ( estados_prev[37] !== estados_expected_prev[37] )
		&& ((estados_expected_prev[37] !== last_estados_exp[37]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[37] = estados_expected_prev[37];
	end
	if (
		( estados_expected_prev[38] !== 1'bx ) && ( estados_prev[38] !== estados_expected_prev[38] )
		&& ((estados_expected_prev[38] !== last_estados_exp[38]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[38] = estados_expected_prev[38];
	end
	if (
		( estados_expected_prev[39] !== 1'bx ) && ( estados_prev[39] !== estados_expected_prev[39] )
		&& ((estados_expected_prev[39] !== last_estados_exp[39]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estados[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estados_expected_prev);
		$display ("     Real value = %b", estados_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_estados_exp[39] = estados_expected_prev[39];
	end
	if (
		( reset_Cont_expected_prev !== 1'bx ) && ( reset_Cont_prev !== reset_Cont_expected_prev )
		&& ((reset_Cont_expected_prev !== last_reset_Cont_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_Cont :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_Cont_expected_prev);
		$display ("     Real value = %b", reset_Cont_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_reset_Cont_exp = reset_Cont_expected_prev;
	end
	if (
		( reset_cont_bits_expected_prev !== 1'bx ) && ( reset_cont_bits_prev !== reset_cont_bits_expected_prev )
		&& ((reset_cont_bits_expected_prev !== last_reset_cont_bits_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_cont_bits :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_cont_bits_expected_prev);
		$display ("     Real value = %b", reset_cont_bits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_reset_cont_bits_exp = reset_cont_bits_expected_prev;
	end
	if (
		( resetBigContador_expected_prev !== 1'bx ) && ( resetBigContador_prev !== resetBigContador_expected_prev )
		&& ((resetBigContador_expected_prev !== last_resetBigContador_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port resetBigContador :: @time = %t",  $realtime);
		$display ("     Expected value = %b", resetBigContador_expected_prev);
		$display ("     Real value = %b", resetBigContador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_resetBigContador_exp = resetBigContador_expected_prev;
	end
	if (
		( select_1_expected_prev[0] !== 1'bx ) && ( select_1_prev[0] !== select_1_expected_prev[0] )
		&& ((select_1_expected_prev[0] !== last_select_1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_1_expected_prev);
		$display ("     Real value = %b", select_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_select_1_exp[0] = select_1_expected_prev[0];
	end
	if (
		( select_1_expected_prev[1] !== 1'bx ) && ( select_1_prev[1] !== select_1_expected_prev[1] )
		&& ((select_1_expected_prev[1] !== last_select_1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_1_expected_prev);
		$display ("     Real value = %b", select_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_select_1_exp[1] = select_1_expected_prev[1];
	end
	if (
		( select_1_expected_prev[2] !== 1'bx ) && ( select_1_prev[2] !== select_1_expected_prev[2] )
		&& ((select_1_expected_prev[2] !== last_select_1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_1_expected_prev);
		$display ("     Real value = %b", select_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_select_1_exp[2] = select_1_expected_prev[2];
	end
	if (
		( select_2_expected_prev[0] !== 1'bx ) && ( select_2_prev[0] !== select_2_expected_prev[0] )
		&& ((select_2_expected_prev[0] !== last_select_2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_2_expected_prev);
		$display ("     Real value = %b", select_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_select_2_exp[0] = select_2_expected_prev[0];
	end
	if (
		( select_2_expected_prev[1] !== 1'bx ) && ( select_2_prev[1] !== select_2_expected_prev[1] )
		&& ((select_2_expected_prev[1] !== last_select_2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_2_expected_prev);
		$display ("     Real value = %b", select_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_select_2_exp[1] = select_2_expected_prev[1];
	end
	if (
		( select_2_expected_prev[2] !== 1'bx ) && ( select_2_prev[2] !== select_2_expected_prev[2] )
		&& ((select_2_expected_prev[2] !== last_select_2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_2_expected_prev);
		$display ("     Real value = %b", select_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_select_2_exp[2] = select_2_expected_prev[2];
	end
	if (
		( select_3_expected_prev[0] !== 1'bx ) && ( select_3_prev[0] !== select_3_expected_prev[0] )
		&& ((select_3_expected_prev[0] !== last_select_3_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_3_expected_prev);
		$display ("     Real value = %b", select_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_select_3_exp[0] = select_3_expected_prev[0];
	end
	if (
		( select_3_expected_prev[1] !== 1'bx ) && ( select_3_prev[1] !== select_3_expected_prev[1] )
		&& ((select_3_expected_prev[1] !== last_select_3_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_3_expected_prev);
		$display ("     Real value = %b", select_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_select_3_exp[1] = select_3_expected_prev[1];
	end
	if (
		( select_3_expected_prev[2] !== 1'bx ) && ( select_3_prev[2] !== select_3_expected_prev[2] )
		&& ((select_3_expected_prev[2] !== last_select_3_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_3_expected_prev);
		$display ("     Real value = %b", select_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_select_3_exp[2] = select_3_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONTROL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg big_conteo;
reg clk;
reg [3:0] Columnas;
reg Confirmar;
reg Conteo;
reg conteo_bits;
reg reset;
// wires                                               
wire [5:0] EnableDATO;
wire enableDesplazar;
wire enableGlobal;
wire enableGuardar;
wire [39:0] estados;
wire reset_Cont;
wire reset_cont_bits;
wire resetBigContador;
wire [2:0] select_1;
wire [2:0] select_2;
wire [2:0] select_3;

wire sampler;                             

// assign statements (if any)                          
CONTROL i1 (
// port map - connection between master ports and signals/registers   
	.big_conteo(big_conteo),
	.clk(clk),
	.Columnas(Columnas),
	.Confirmar(Confirmar),
	.Conteo(Conteo),
	.conteo_bits(conteo_bits),
	.EnableDATO(EnableDATO),
	.enableDesplazar(enableDesplazar),
	.enableGlobal(enableGlobal),
	.enableGuardar(enableGuardar),
	.estados(estados),
	.reset(reset),
	.reset_Cont(reset_Cont),
	.reset_cont_bits(reset_cont_bits),
	.resetBigContador(resetBigContador),
	.select_1(select_1),
	.select_2(select_2),
	.select_3(select_3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
end 
// Columnas[ 3 ]
initial
begin
	Columnas[3] = 1'b0;
end 
// Columnas[ 2 ]
initial
begin
	Columnas[2] = 1'b0;
end 
// Columnas[ 1 ]
initial
begin
	Columnas[1] = 1'b0;
	Columnas[1] = #40000 1'b1;
	Columnas[1] = #60000 1'b0;
	Columnas[1] = #30000 1'b1;
	Columnas[1] = #60000 1'b0;
	Columnas[1] = #30000 1'b1;
	Columnas[1] = #60000 1'b0;
	Columnas[1] = #30000 1'b1;
	Columnas[1] = #50000 1'b0;
	Columnas[1] = #30000 1'b1;
	Columnas[1] = #70000 1'b0;
	Columnas[1] = #30000 1'b1;
	Columnas[1] = #60000 1'b0;
end 
// Columnas[ 0 ]
initial
begin
	Columnas[0] = 1'b0;
end 

// Confirmar
initial
begin
	Confirmar = 1'b0;
	Confirmar = #590000 1'b1;
	Confirmar = #40000 1'b0;
end 

// Conteo
initial
begin
	Conteo = 1'b0;
end 

// conteo_bits
initial
begin
	conteo_bits = 1'b0;
end 

// big_conteo
initial
begin
	big_conteo = 1'b0;
	big_conteo = #720000 1'b1;
	big_conteo = #40000 1'b0;
	big_conteo = #70000 1'b1;
	big_conteo = #40000 1'b0;
	big_conteo = #60000 1'b1;
	big_conteo = #40000 1'b0;
end 

CONTROL_vlg_sample_tst tb_sample (
	.big_conteo(big_conteo),
	.clk(clk),
	.Columnas(Columnas),
	.Confirmar(Confirmar),
	.Conteo(Conteo),
	.conteo_bits(conteo_bits),
	.reset(reset),
	.sampler_tx(sampler)
);

CONTROL_vlg_check_tst tb_out(
	.EnableDATO(EnableDATO),
	.enableDesplazar(enableDesplazar),
	.enableGlobal(enableGlobal),
	.enableGuardar(enableGuardar),
	.estados(estados),
	.reset_Cont(reset_Cont),
	.reset_cont_bits(reset_cont_bits),
	.resetBigContador(resetBigContador),
	.select_1(select_1),
	.select_2(select_2),
	.select_3(select_3),
	.sampler_rx(sampler)
);
endmodule

